import Foundation
import AppKit
import Carbon

Log.d("PuntoPunto", "Starting PuntoPunto application")

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Accessibility
func checkAccessibilityPermissions() -> Bool {
    let options = [kAXTrustedCheckOptionPrompt.takeRetainedValue(): true]
    let isTrusted = AXIsProcessTrustedWithOptions(options as CFDictionary)
    
    if !isTrusted {
        Log.d("PuntoPunto", "Accessibility permissions not granted")
        
        let alert = NSAlert()
        alert.messageText = "–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
        alert.informativeText = "PuntoPunto —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø' –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ > –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å > –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        alert.alertStyle = .warning
        alert.addButton(withTitle: "OK")
        alert.runModal()
        
        return false
    }
    
    return true
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class PuntoPuntoApp: NSObject, NSApplicationDelegate {
    private let hotkeyManager = HotkeyManager()
    private var statusItem: NSStatusItem?
    
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        Log.d("PuntoPunto", "Application did finish launching")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        guard checkAccessibilityPermissions() else {
            Log.d("PuntoPunto", "Accessibility permissions required - exiting")
            NSApp.terminate(nil)
            return
        }
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        Task {
            await initializeAsync()
        }
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    private func initializeAsync() async {
        // 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã (–ö–†–ò–¢–ò–ß–ù–û: –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ hotkeys)
        Log.d("PuntoPunto", "üîÑ Loading dictionaries...")
        await DictionaryManager.shared.loadDictionaries()
        Log.d("PuntoPunto", "‚úÖ Dictionaries ready")
        
        // 2. UI-related –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ main thread
        await MainActor.run {
            // Debug: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö input sources
            InputSourceManager.listAllInputSources()
            
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Option –∫–ª–∞–≤–∏—à–∏ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞—Ä–µ–π
            hotkeyManager.registerLayoutSwitch()
            Log.d("PuntoPunto", "‚úÖ Auto-replacement enabled")
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ (—Ç—Ä–µ–±—É–µ—Ç main thread)
            setupStatusItem()
            
            Log.d("PuntoPunto", "PuntoPunto successfully initialized and ready")
        }
    }
    
    func applicationWillTerminate(_ aNotification: Notification) {
        Log.d("PuntoPunto", "Application will terminate")
    }
    
    func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
        return false // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ
    }
    
    private func setupStatusItem() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.squareLength)
        
        if let button = statusItem?.button {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            button.image = NSImage(systemSymbolName: "character.textbox", accessibilityDescription: "PuntoPunto")
            button.toolTip = "PuntoPunto - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ (Option)"
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        let menu = NSMenu()
        
        let aboutItem = NSMenuItem(title: "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", action: #selector(showAbout), keyEquivalent: "")
        aboutItem.target = self
        menu.addItem(aboutItem)
        
        menu.addItem(NSMenuItem.separator())
        
        let quitItem = NSMenuItem(title: "–í—ã–π—Ç–∏", action: #selector(quitApp), keyEquivalent: "q")
        quitItem.target = self
        menu.addItem(quitItem)
        
        statusItem?.menu = menu
        
        Log.d("PuntoPunto", "Status item created")
    }
    
    @objc private func showAbout() {
        let alert = NSAlert()
        alert.messageText = "PuntoPunto"
        alert.informativeText = "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à—É Option –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –∏ —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∞–º–∏."
        alert.alertStyle = .informational
        alert.addButton(withTitle: "OK")
        alert.runModal()
    }
    
    @objc private func quitApp() {
        Log.d("PuntoPunto", "Quitting application")
        NSApp.terminate(nil)
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app = NSApplication.shared
let delegate = PuntoPuntoApp()
app.delegate = delegate

// –°–∫—Ä—ã—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ –¥–æ–∫–∞ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ)
app.setActivationPolicy(.accessory)

Log.d("PuntoPunto", "Starting run loop")
app.run()
